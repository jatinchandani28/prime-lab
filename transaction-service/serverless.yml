service: transactionteam10-service

frameworkVersion: "3"

package:
  patterns:
    - '!node-cli-layer.zip'
provider:
  name: aws
  runtime: nodejs14.x
  region: ${file(../serverless-config.json):region}
  stage: ${opt:stage, 'dev'}
  timeout: 30
  apiGateway:
    apiKeys:
      - defaultKey
  httpApi:
    id: !ImportValue NearGatewayHttpApiId
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:BatchGet*
            - dynamodb:DescribeStream
            - dynamodb:DescribeTable
            - dynamodb:Get*
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:BatchWrite*
            - dynamodb:CreateTable
            - dynamodb:Delete*
            - dynamodb:Update*
            - dynamodb:PutItem
            - ssm:DescribeParameters
            - ssm:GetParameter
            - ssm:GetParameters
          Resource:
            - "arn:aws:dynamodb:*:*:*"
            - "arn:aws:dynamodb:*:*:*/*/index/*"
            - "arn:aws:ssm:*"
        - Effect: "Allow"
          Action:
            - "lambda:InvokeFunction"
            - "lambda:InvokeAsync"
          Resource: "*"
        - Effect: Allow
          Action:
            - sqs:*
          Resource: "*"
        - Effect: "Allow"
          Action:
            - logs:*
            - ssm:*
          Resource: "*"
        - Effect: Allow
          Action:
            - secretsmanager:*        
          Resource: "*"

functions:
  transactions-list:
    handler: list.main
    events:
      - httpApi:
          path: /transactions/list
          method: get
  transactions-get:
    handler: get.main
    events:
      - httpApi:
          path: /transactions/{transactionId}
          method: get
  transactions-create:
    handler: create.main
    events:
      - httpApi:
          path: /transactions
          method: post
    layers:
      - arn:aws:lambda:us-east-1:${aws:accountId}:layer:near-cli:5

plugins:
  - serverless-offline
  # - serverless-bundle
  # - serverless-dotenv-plugin
  # - serverless-dynamodb-local

# resources:
#   Resources:
#     TransactionsCreatePermission:
#       Type: AWS::Lambda::Permission
#       Properties:
#         Action: lambda:InvokeFunction
#         FunctionName: !GetAtt TransactionsDashcreateLambdaFunction.Arn
#         Principal: ${aws:accountId}


# #This is just for testing locally, the devops teams is deploying the DynamoTables for us
# resources:
#   Resources:
#     transactionsTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: transactions
#         AttributeDefinitions:
#           - AttributeName: transaction_id
#             AttributeType: S
#         KeySchema:
#           - AttributeName: transaction_id
#             KeyType: HASH
#         BillingMode: PAY_PER_REQUEST

# custom:
#   dynamodb:
#     stages:
#       - local
#     start:
#       port: 8000
#       inMemory: true
#       heapInitial: 200m
#       heapMax: 1g
#       migrate: true
#       seed: true
#       convertEmptyValues: true
